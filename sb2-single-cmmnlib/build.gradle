plugins {
    id "java"
    id "maven-publish"
    id "project-report"
    id "eclipse"
    id "eclipse-wtp"
    id "org.springframework.boot"        version "${springBootVersion}"
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}"
    id "org.hidetake.ssh"                version "${hidetakeSshVersion}"
    id "checkstyle"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven {
        url uri ("${rootProject.projectDir}/zMavenRepository")
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        url uri ("${localRepository}")
        metadataSources {
            mavenPom()
            artifact()
        }
    }

    //mavenLocal() //.m2/repository 사용 함
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

group   = "${projectGroup}"
version = "${projectVersion}"
sourceCompatibility = "${javaSource}"
targetCompatibility = "${javaTarget}"
[compileJava, compileTestJava]*.options*.encoding = "${javaEncoding}" // 소스 인코딩 지정밥법 1

ext {
    DEV = "dev"
    STG = "stg"
    PRD = "prd"
    if (!project.hasProperty("profile") || !profile) {
        ext.profile = DEV //"dev"
    }

    currentProfile  = "${profile}" // 환경에 따른 배포를 위한 변수    
    println(project.name + "[${profile}/" + currentProfile + "]")
    println "Project Dir :  " + project.projectDir
    println "Build Dir   :  " + project.buildDir

    isDEV = currentProfile == DEV
    isSTG = currentProfile == STG
    isPRD = currentProfile == PRD
    println(isDEV)
    println(isSTG)
    println(isPRD)


    deployUrl               = ""
    thisArtifactId          = project.thisProjectName // 환경별 artifactId
    versionByProfile        = "" // 환경별 version
    deployFileNameByProfile = "" // 환경별 jar name
    if(isDEV) {
        deployUrl        = "${repositoryBaseUrl}" + project.repositorySuffixSnapshot
        versionByProfile = "${DEV}-" + version + "-SNAPSHOT"
    } else if(isSTG) {
        deployUrl        = "${repositoryBaseUrl}" + project.repositorySuffixSnapshot
        versionByProfile = "${STG}-" + version + "-SNAPSHOT"
    } else if(isPRD) {
        deployUrl        = "${repositoryBaseUrl}" + project.repositorySuffixRelease
        versionByProfile = version
    } else {
        println "check your gradle profile[${profile}]"
        throw new GradleException("check your gradle profile[${profile}]")
    }
    deployFileNameByProfile = thisArtifactId + "-" + versionByProfile + project.properties["deployFileExtension"]

    println(project.name + "[${profile}/" + currentProfile + "/" + deployFileNameByProfile + "]")
    println(rootProject.name + "[${profile}/" + currentProfile + "/" + deployFileNameByProfile + "]")
    println project.properties["deployFileNameByProfile"]
    println project.properties["deployUrl"]
    //println "Project Dir :  $projectDir"
    //println "Build Dir   :  $buildDir"
}

sourceSets {
    main {
        java.srcDirs = ["src/main/java"]

        if(project.hasProperty( "profile" )) {
            // resource에 src/main/java 패키지 제외하고 build하기
            //resources.srcDirs = ["src/main/resources", "src/main/resources-${profile}"]

            // resource에 src/main/java 패키지 내 xml 파일 포함하여 build하기
            resources.srcDirs = ["src/main/java", "src/main/resources", "src/main/resources-${profile}"]

            //resources.excludes = ["**/sample", "**/sample*", "**/sample/*"]
        }
    }
}

publishing {
    // repository publish
    repositories {
        maven {
            url deployUrl
            allowInsecureProtocol true // 강제로 http 사용하도록 하는 설정
            credentials {
                username project.repositoryUsername
                password project.repositoryPassword
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId    = group
            artifactId = thisArtifactId
            version    = versionByProfile

            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }

            from components.java
        }
    }
}


dependencies {
    /** lombok & spring-boot-devtools */
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    //testAnnotationProcessor "org.projectlombok:lombok:1.18.22"
    //testCompileOnly "org.projectlombok:lombok:1.18.22"
    developmentOnly "org.springframework.boot:spring-boot-devtools"


    /** spring-boot */
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation      "org.springframework.boot:spring-boot-actuator-autoconfigure"

    /** spring-boot-starter */
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    /** mybatis-spring-boot-starter */
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootVersion}"

    /** encrypt properties */
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptSpringBootVersion}"

    /** test dependency */
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
       exclude group : "org.junit.vintage", module : "junit-vintage-engine"
       //exclude module : "org.junit.vintage:junit-vintage-engine"
    }
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.platform:junit-platform-runner:1.7.1"


    /** jetty for webClient Loging */
    //implementation "org.eclipse.jetty:jetty-reactive-httpclient:1.1.12"
    implementation ("org.eclipse.jetty:jetty-reactive-httpclient:${jettyReactiveHttpclientVersion}") {
        exclude module: "jetty-client"
        exclude group : "org.slf4j"
    }
    implementation ("org.eclipse.jetty:jetty-client:${jettyClientVersion}") {
        exclude module: "jetty-alpn-client"
        exclude module: "jetty-http"
        exclude module: "jetty-io"
        exclude module: "jetty-util"
        exclude module: "slf4j-api"
    }
    implementation ("org.eclipse.jetty:jetty-alpn-client:${jettyClientVersion}") {
        exclude module: "jetty-io"
        exclude module: "jetty-util"
        exclude module: "slf4j-api"
    }
    implementation ("org.eclipse.jetty:jetty-http:${jettyClientVersion}") {
        exclude module: "jetty-io"
        exclude module: "jetty-util"
        exclude module: "slf4j-api"
    }
    implementation ("org.eclipse.jetty:jetty-io:${jettyClientVersion}") {
        exclude module: "jetty-util"
        exclude module: "slf4j-api"
    }
    implementation ("org.eclipse.jetty:jetty-util:${jettyClientVersion}") {
        exclude module: "slf4j-api"
    }


    /** apache-commons */
    implementation "commons-beanutils:commons-beanutils:1.9.4"
    implementation "commons-codec:commons-codec:1.15"
    implementation "commons-io:commons-io:2.11.0"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.apache.commons:commons-text:1.9"
    implementation "commons-fileupload:commons-fileupload:1.5" // file upload

    /** xss - lucy by naver */      
    implementation("com.navercorp.lucy:lucy-xss-servlet:2.0.1")

    /** org.json */
    implementation group: "org.json", name: "json", version: "20211205"

    //implementation "com.fasterxml.jackson.core:jackson-annotations"
    //implementation "com.fasterxml.jackson.core:jackson-core"
    //implementation "com.fasterxml.jackson.core:jackson-databind"

    /** message for yaml */
    implementation "dev.akkinoc.util:yaml-resource-bundle:2.0.2"

    /** findbugs */
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}


/**########## task START ##########**/
// 소스 인코딩 지정밥법 2
tasks.withType(JavaCompile) {
    options.encoding = "${javaEncoding}"
}

tasks.javadoc {
    options.encoding = "${javaEncoding}"
}

tasks {
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        //duplicatesStrategy = DuplicatesStrategy.WARN

        // compileJava 후 실행
        mustRunAfter compileJava
    }

    bootJar {
        //
        println "bootJar"
        enabled = false
        archiveFileName = "${deployFileNameByProfile}"
        duplicatesStrategy = DuplicatesStrategy.WARN
    }

    jar {
        println "jar"

        archiveClassifier.set("")
        enabled = true
        archiveFileName = "${deployFileNameByProfile}"
        duplicatesStrategy = DuplicatesStrategy.WARN
    }

    // checkstyle
    checkstyle {
        sourceSets = [sourceSets.main] // CompileQuerydsl 오류 해결
        configFile = rootProject.file("${rootDir}/checkstyle/checkstyle-rules.xml")
        //configProperties = ["suppressionFile": "${rootDir}/checkstyle/naver-checkstyle-suppressions.xml"]
    }
}

// checkstyle
tasks.withType(Checkstyle) {
    reports {
        xml.required  = true
        html.required = true
    }
}

tasks.named("test") {
    useJUnitPlatform()
}
/**########## task END ##########**/
